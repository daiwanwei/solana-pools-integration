/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export const RAYDIUM_PROTOCOL_POSITION_DISCRIMINATOR = new Uint8Array([
  38, 10, 196, 210, 61, 165, 24, 135,
]);

export function getRaydiumProtocolPositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RAYDIUM_PROTOCOL_POSITION_DISCRIMINATOR
  );
}

export type RaydiumProtocolPosition = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  config: Address;
  raydiumPool: Address;
  raydiumPositionNft: Address;
  tickLowerIndex: number;
  tickUpperIndex: number;
  positionVault0: Address;
  positionVault1: Address;
  totalShares: bigint;
  feeGrowthInside0LastX64: bigint;
  feeGrowthInside1LastX64: bigint;
};

export type RaydiumProtocolPositionArgs = {
  bump: number;
  config: Address;
  raydiumPool: Address;
  raydiumPositionNft: Address;
  tickLowerIndex: number;
  tickUpperIndex: number;
  positionVault0: Address;
  positionVault1: Address;
  totalShares: number | bigint;
  feeGrowthInside0LastX64: number | bigint;
  feeGrowthInside1LastX64: number | bigint;
};

export function getRaydiumProtocolPositionEncoder(): Encoder<RaydiumProtocolPositionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['config', getAddressEncoder()],
      ['raydiumPool', getAddressEncoder()],
      ['raydiumPositionNft', getAddressEncoder()],
      ['tickLowerIndex', getI32Encoder()],
      ['tickUpperIndex', getI32Encoder()],
      ['positionVault0', getAddressEncoder()],
      ['positionVault1', getAddressEncoder()],
      ['totalShares', getU128Encoder()],
      ['feeGrowthInside0LastX64', getU128Encoder()],
      ['feeGrowthInside1LastX64', getU128Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: RAYDIUM_PROTOCOL_POSITION_DISCRIMINATOR,
    })
  );
}

export function getRaydiumProtocolPositionDecoder(): Decoder<RaydiumProtocolPosition> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['config', getAddressDecoder()],
    ['raydiumPool', getAddressDecoder()],
    ['raydiumPositionNft', getAddressDecoder()],
    ['tickLowerIndex', getI32Decoder()],
    ['tickUpperIndex', getI32Decoder()],
    ['positionVault0', getAddressDecoder()],
    ['positionVault1', getAddressDecoder()],
    ['totalShares', getU128Decoder()],
    ['feeGrowthInside0LastX64', getU128Decoder()],
    ['feeGrowthInside1LastX64', getU128Decoder()],
  ]);
}

export function getRaydiumProtocolPositionCodec(): Codec<
  RaydiumProtocolPositionArgs,
  RaydiumProtocolPosition
> {
  return combineCodec(
    getRaydiumProtocolPositionEncoder(),
    getRaydiumProtocolPositionDecoder()
  );
}

export function decodeRaydiumProtocolPosition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<RaydiumProtocolPosition, TAddress>;
export function decodeRaydiumProtocolPosition<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<RaydiumProtocolPosition, TAddress>;
export function decodeRaydiumProtocolPosition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<RaydiumProtocolPosition, TAddress>
  | MaybeAccount<RaydiumProtocolPosition, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRaydiumProtocolPositionDecoder()
  );
}

export async function fetchRaydiumProtocolPosition<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<RaydiumProtocolPosition, TAddress>> {
  const maybeAccount = await fetchMaybeRaydiumProtocolPosition(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRaydiumProtocolPosition<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<RaydiumProtocolPosition, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRaydiumProtocolPosition(maybeAccount);
}

export async function fetchAllRaydiumProtocolPosition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<RaydiumProtocolPosition>[]> {
  const maybeAccounts = await fetchAllMaybeRaydiumProtocolPosition(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRaydiumProtocolPosition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<RaydiumProtocolPosition>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeRaydiumProtocolPosition(maybeAccount)
  );
}

export function getRaydiumProtocolPositionSize(): number {
  return 225;
}
