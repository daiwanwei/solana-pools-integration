/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export const RAYDIUM_USER_POSITION_DISCRIMINATOR = new Uint8Array([
  196, 91, 205, 134, 85, 116, 176, 104,
]);

export function getRaydiumUserPositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RAYDIUM_USER_POSITION_DISCRIMINATOR
  );
}

export type RaydiumUserPosition = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  raydiumProtocolPosition: Address;
  owner: Address;
  shares: bigint;
  feeGrowthInside0LastX64: bigint;
  feeGrowthInside1LastX64: bigint;
  tokenFeesOwed0: bigint;
  tokenFeesOwed1: bigint;
};

export type RaydiumUserPositionArgs = {
  bump: number;
  raydiumProtocolPosition: Address;
  owner: Address;
  shares: number | bigint;
  feeGrowthInside0LastX64: number | bigint;
  feeGrowthInside1LastX64: number | bigint;
  tokenFeesOwed0: number | bigint;
  tokenFeesOwed1: number | bigint;
};

export function getRaydiumUserPositionEncoder(): Encoder<RaydiumUserPositionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['raydiumProtocolPosition', getAddressEncoder()],
      ['owner', getAddressEncoder()],
      ['shares', getU128Encoder()],
      ['feeGrowthInside0LastX64', getU128Encoder()],
      ['feeGrowthInside1LastX64', getU128Encoder()],
      ['tokenFeesOwed0', getU64Encoder()],
      ['tokenFeesOwed1', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: RAYDIUM_USER_POSITION_DISCRIMINATOR,
    })
  );
}

export function getRaydiumUserPositionDecoder(): Decoder<RaydiumUserPosition> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['raydiumProtocolPosition', getAddressDecoder()],
    ['owner', getAddressDecoder()],
    ['shares', getU128Decoder()],
    ['feeGrowthInside0LastX64', getU128Decoder()],
    ['feeGrowthInside1LastX64', getU128Decoder()],
    ['tokenFeesOwed0', getU64Decoder()],
    ['tokenFeesOwed1', getU64Decoder()],
  ]);
}

export function getRaydiumUserPositionCodec(): Codec<
  RaydiumUserPositionArgs,
  RaydiumUserPosition
> {
  return combineCodec(
    getRaydiumUserPositionEncoder(),
    getRaydiumUserPositionDecoder()
  );
}

export function decodeRaydiumUserPosition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<RaydiumUserPosition, TAddress>;
export function decodeRaydiumUserPosition<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<RaydiumUserPosition, TAddress>;
export function decodeRaydiumUserPosition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<RaydiumUserPosition, TAddress>
  | MaybeAccount<RaydiumUserPosition, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRaydiumUserPositionDecoder()
  );
}

export async function fetchRaydiumUserPosition<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<RaydiumUserPosition, TAddress>> {
  const maybeAccount = await fetchMaybeRaydiumUserPosition(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRaydiumUserPosition<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<RaydiumUserPosition, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRaydiumUserPosition(maybeAccount);
}

export async function fetchAllRaydiumUserPosition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<RaydiumUserPosition>[]> {
  const maybeAccounts = await fetchAllMaybeRaydiumUserPosition(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRaydiumUserPosition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<RaydiumUserPosition>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeRaydiumUserPosition(maybeAccount)
  );
}

export function getRaydiumUserPositionSize(): number {
  return 137;
}
