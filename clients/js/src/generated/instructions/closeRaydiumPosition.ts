/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LIQUIDITY_PROXY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLOSE_RAYDIUM_POSITION_DISCRIMINATOR = new Uint8Array([
  162, 208, 2, 192, 141, 142, 245, 58,
]);

export function getCloseRaydiumPositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_RAYDIUM_POSITION_DISCRIMINATOR
  );
}

export type CloseRaydiumPositionInstruction<
  TProgram extends string = typeof LIQUIDITY_PROXY_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountRaydiumProtocolPosition extends
    | string
    | IAccountMeta<string> = string,
  TAccountClmmProgram extends
    | string
    | IAccountMeta<string> = 'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK',
  TAccountPositionNftMint extends string | IAccountMeta<string> = string,
  TAccountPositionNftAccount extends string | IAccountMeta<string> = string,
  TAccountPersonalPosition extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountRaydiumProtocolPosition extends string
        ? WritableAccount<TAccountRaydiumProtocolPosition>
        : TAccountRaydiumProtocolPosition,
      TAccountClmmProgram extends string
        ? ReadonlyAccount<TAccountClmmProgram>
        : TAccountClmmProgram,
      TAccountPositionNftMint extends string
        ? WritableAccount<TAccountPositionNftMint>
        : TAccountPositionNftMint,
      TAccountPositionNftAccount extends string
        ? WritableAccount<TAccountPositionNftAccount>
        : TAccountPositionNftAccount,
      TAccountPersonalPosition extends string
        ? WritableAccount<TAccountPersonalPosition>
        : TAccountPersonalPosition,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CloseRaydiumPositionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CloseRaydiumPositionInstructionDataArgs = {};

export function getCloseRaydiumPositionInstructionDataEncoder(): Encoder<CloseRaydiumPositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CLOSE_RAYDIUM_POSITION_DISCRIMINATOR,
    })
  );
}

export function getCloseRaydiumPositionInstructionDataDecoder(): Decoder<CloseRaydiumPositionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseRaydiumPositionInstructionDataCodec(): Codec<
  CloseRaydiumPositionInstructionDataArgs,
  CloseRaydiumPositionInstructionData
> {
  return combineCodec(
    getCloseRaydiumPositionInstructionDataEncoder(),
    getCloseRaydiumPositionInstructionDataDecoder()
  );
}

export type CloseRaydiumPositionAsyncInput<
  TAccountSigner extends string = string,
  TAccountConfig extends string = string,
  TAccountRaydiumProtocolPosition extends string = string,
  TAccountClmmProgram extends string = string,
  TAccountPositionNftMint extends string = string,
  TAccountPositionNftAccount extends string = string,
  TAccountPersonalPosition extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  config: Address<TAccountConfig>;
  raydiumProtocolPosition: Address<TAccountRaydiumProtocolPosition>;
  clmmProgram?: Address<TAccountClmmProgram>;
  /** Unique token mint address */
  positionNftMint: Address<TAccountPositionNftMint>;
  /** Token account where position NFT will be minted */
  positionNftAccount?: Address<TAccountPositionNftAccount>;
  /**
   * To store metaplex metadata
   * Metadata for the tokenized position
   */
  personalPosition: Address<TAccountPersonalPosition>;
  /** Program to create the position manager state account */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Program to create mint account and mint tokens */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export async function getCloseRaydiumPositionInstructionAsync<
  TAccountSigner extends string,
  TAccountConfig extends string,
  TAccountRaydiumProtocolPosition extends string,
  TAccountClmmProgram extends string,
  TAccountPositionNftMint extends string,
  TAccountPositionNftAccount extends string,
  TAccountPersonalPosition extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof LIQUIDITY_PROXY_PROGRAM_ADDRESS,
>(
  input: CloseRaydiumPositionAsyncInput<
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountClmmProgram,
    TAccountPositionNftMint,
    TAccountPositionNftAccount,
    TAccountPersonalPosition,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CloseRaydiumPositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountClmmProgram,
    TAccountPositionNftMint,
    TAccountPositionNftAccount,
    TAccountPersonalPosition,
    TAccountSystemProgram,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LIQUIDITY_PROXY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    raydiumProtocolPosition: {
      value: input.raydiumProtocolPosition ?? null,
      isWritable: true,
    },
    clmmProgram: { value: input.clmmProgram ?? null, isWritable: false },
    positionNftMint: { value: input.positionNftMint ?? null, isWritable: true },
    positionNftAccount: {
      value: input.positionNftAccount ?? null,
      isWritable: true,
    },
    personalPosition: {
      value: input.personalPosition ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.clmmProgram.value) {
    accounts.clmmProgram.value =
      'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK' as Address<'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK'>;
  }
  if (!accounts.positionNftAccount.value) {
    accounts.positionNftAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.raydiumProtocolPosition.value)
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.positionNftMint.value)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.raydiumProtocolPosition),
      getAccountMeta(accounts.clmmProgram),
      getAccountMeta(accounts.positionNftMint),
      getAccountMeta(accounts.positionNftAccount),
      getAccountMeta(accounts.personalPosition),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCloseRaydiumPositionInstructionDataEncoder().encode({}),
  } as CloseRaydiumPositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountClmmProgram,
    TAccountPositionNftMint,
    TAccountPositionNftAccount,
    TAccountPersonalPosition,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type CloseRaydiumPositionInput<
  TAccountSigner extends string = string,
  TAccountConfig extends string = string,
  TAccountRaydiumProtocolPosition extends string = string,
  TAccountClmmProgram extends string = string,
  TAccountPositionNftMint extends string = string,
  TAccountPositionNftAccount extends string = string,
  TAccountPersonalPosition extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  config: Address<TAccountConfig>;
  raydiumProtocolPosition: Address<TAccountRaydiumProtocolPosition>;
  clmmProgram?: Address<TAccountClmmProgram>;
  /** Unique token mint address */
  positionNftMint: Address<TAccountPositionNftMint>;
  /** Token account where position NFT will be minted */
  positionNftAccount: Address<TAccountPositionNftAccount>;
  /**
   * To store metaplex metadata
   * Metadata for the tokenized position
   */
  personalPosition: Address<TAccountPersonalPosition>;
  /** Program to create the position manager state account */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Program to create mint account and mint tokens */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getCloseRaydiumPositionInstruction<
  TAccountSigner extends string,
  TAccountConfig extends string,
  TAccountRaydiumProtocolPosition extends string,
  TAccountClmmProgram extends string,
  TAccountPositionNftMint extends string,
  TAccountPositionNftAccount extends string,
  TAccountPersonalPosition extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof LIQUIDITY_PROXY_PROGRAM_ADDRESS,
>(
  input: CloseRaydiumPositionInput<
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountClmmProgram,
    TAccountPositionNftMint,
    TAccountPositionNftAccount,
    TAccountPersonalPosition,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CloseRaydiumPositionInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountConfig,
  TAccountRaydiumProtocolPosition,
  TAccountClmmProgram,
  TAccountPositionNftMint,
  TAccountPositionNftAccount,
  TAccountPersonalPosition,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LIQUIDITY_PROXY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    raydiumProtocolPosition: {
      value: input.raydiumProtocolPosition ?? null,
      isWritable: true,
    },
    clmmProgram: { value: input.clmmProgram ?? null, isWritable: false },
    positionNftMint: { value: input.positionNftMint ?? null, isWritable: true },
    positionNftAccount: {
      value: input.positionNftAccount ?? null,
      isWritable: true,
    },
    personalPosition: {
      value: input.personalPosition ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.clmmProgram.value) {
    accounts.clmmProgram.value =
      'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK' as Address<'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.raydiumProtocolPosition),
      getAccountMeta(accounts.clmmProgram),
      getAccountMeta(accounts.positionNftMint),
      getAccountMeta(accounts.positionNftAccount),
      getAccountMeta(accounts.personalPosition),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCloseRaydiumPositionInstructionDataEncoder().encode({}),
  } as CloseRaydiumPositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountClmmProgram,
    TAccountPositionNftMint,
    TAccountPositionNftAccount,
    TAccountPersonalPosition,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedCloseRaydiumPositionInstruction<
  TProgram extends string = typeof LIQUIDITY_PROXY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    config: TAccountMetas[1];
    raydiumProtocolPosition: TAccountMetas[2];
    clmmProgram: TAccountMetas[3];
    /** Unique token mint address */
    positionNftMint: TAccountMetas[4];
    /** Token account where position NFT will be minted */
    positionNftAccount: TAccountMetas[5];
    /**
     * To store metaplex metadata
     * Metadata for the tokenized position
     */

    personalPosition: TAccountMetas[6];
    /** Program to create the position manager state account */
    systemProgram: TAccountMetas[7];
    /** Program to create mint account and mint tokens */
    tokenProgram: TAccountMetas[8];
  };
  data: CloseRaydiumPositionInstructionData;
};

export function parseCloseRaydiumPositionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCloseRaydiumPositionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      config: getNextAccount(),
      raydiumProtocolPosition: getNextAccount(),
      clmmProgram: getNextAccount(),
      positionNftMint: getNextAccount(),
      positionNftAccount: getNextAccount(),
      personalPosition: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getCloseRaydiumPositionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
