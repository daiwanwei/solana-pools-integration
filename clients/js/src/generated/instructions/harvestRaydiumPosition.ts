/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LIQUIDITY_PROXY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const HARVEST_RAYDIUM_POSITION_DISCRIMINATOR = new Uint8Array([
  55, 230, 106, 177, 166, 220, 200, 80,
]);

export function getHarvestRaydiumPositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    HARVEST_RAYDIUM_POSITION_DISCRIMINATOR
  );
}

export type HarvestRaydiumPositionInstruction<
  TProgram extends string = typeof LIQUIDITY_PROXY_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountRaydiumProtocolPosition extends
    | string
    | IAccountMeta<string> = string,
  TAccountRaydiumUserPosition extends string | IAccountMeta<string> = string,
  TAccountPositionVault0 extends string | IAccountMeta<string> = string,
  TAccountPositionVault1 extends string | IAccountMeta<string> = string,
  TAccountClmmProgram extends
    | string
    | IAccountMeta<string> = 'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK',
  TAccountNftAccount extends string | IAccountMeta<string> = string,
  TAccountPoolState extends string | IAccountMeta<string> = string,
  TAccountProtocolPosition extends string | IAccountMeta<string> = string,
  TAccountPersonalPosition extends string | IAccountMeta<string> = string,
  TAccountTokenVault0 extends string | IAccountMeta<string> = string,
  TAccountTokenVault1 extends string | IAccountMeta<string> = string,
  TAccountTickArrayLower extends string | IAccountMeta<string> = string,
  TAccountTickArrayUpper extends string | IAccountMeta<string> = string,
  TAccountRecipientTokenAccount0 extends string | IAccountMeta<string> = string,
  TAccountRecipientTokenAccount1 extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountTokenProgram2022 extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountMemoProgram extends string | IAccountMeta<string> = string,
  TAccountVault0Mint extends string | IAccountMeta<string> = string,
  TAccountVault1Mint extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountRaydiumProtocolPosition extends string
        ? WritableAccount<TAccountRaydiumProtocolPosition>
        : TAccountRaydiumProtocolPosition,
      TAccountRaydiumUserPosition extends string
        ? WritableAccount<TAccountRaydiumUserPosition>
        : TAccountRaydiumUserPosition,
      TAccountPositionVault0 extends string
        ? WritableAccount<TAccountPositionVault0>
        : TAccountPositionVault0,
      TAccountPositionVault1 extends string
        ? WritableAccount<TAccountPositionVault1>
        : TAccountPositionVault1,
      TAccountClmmProgram extends string
        ? ReadonlyAccount<TAccountClmmProgram>
        : TAccountClmmProgram,
      TAccountNftAccount extends string
        ? ReadonlyAccount<TAccountNftAccount>
        : TAccountNftAccount,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountProtocolPosition extends string
        ? WritableAccount<TAccountProtocolPosition>
        : TAccountProtocolPosition,
      TAccountPersonalPosition extends string
        ? WritableAccount<TAccountPersonalPosition>
        : TAccountPersonalPosition,
      TAccountTokenVault0 extends string
        ? WritableAccount<TAccountTokenVault0>
        : TAccountTokenVault0,
      TAccountTokenVault1 extends string
        ? WritableAccount<TAccountTokenVault1>
        : TAccountTokenVault1,
      TAccountTickArrayLower extends string
        ? WritableAccount<TAccountTickArrayLower>
        : TAccountTickArrayLower,
      TAccountTickArrayUpper extends string
        ? WritableAccount<TAccountTickArrayUpper>
        : TAccountTickArrayUpper,
      TAccountRecipientTokenAccount0 extends string
        ? WritableAccount<TAccountRecipientTokenAccount0>
        : TAccountRecipientTokenAccount0,
      TAccountRecipientTokenAccount1 extends string
        ? WritableAccount<TAccountRecipientTokenAccount1>
        : TAccountRecipientTokenAccount1,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountTokenProgram2022 extends string
        ? ReadonlyAccount<TAccountTokenProgram2022>
        : TAccountTokenProgram2022,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      TAccountVault0Mint extends string
        ? ReadonlyAccount<TAccountVault0Mint>
        : TAccountVault0Mint,
      TAccountVault1Mint extends string
        ? ReadonlyAccount<TAccountVault1Mint>
        : TAccountVault1Mint,
      ...TRemainingAccounts,
    ]
  >;

export type HarvestRaydiumPositionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type HarvestRaydiumPositionInstructionDataArgs = {};

export function getHarvestRaydiumPositionInstructionDataEncoder(): Encoder<HarvestRaydiumPositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: HARVEST_RAYDIUM_POSITION_DISCRIMINATOR,
    })
  );
}

export function getHarvestRaydiumPositionInstructionDataDecoder(): Decoder<HarvestRaydiumPositionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getHarvestRaydiumPositionInstructionDataCodec(): Codec<
  HarvestRaydiumPositionInstructionDataArgs,
  HarvestRaydiumPositionInstructionData
> {
  return combineCodec(
    getHarvestRaydiumPositionInstructionDataEncoder(),
    getHarvestRaydiumPositionInstructionDataDecoder()
  );
}

export type HarvestRaydiumPositionInput<
  TAccountSigner extends string = string,
  TAccountConfig extends string = string,
  TAccountRaydiumProtocolPosition extends string = string,
  TAccountRaydiumUserPosition extends string = string,
  TAccountPositionVault0 extends string = string,
  TAccountPositionVault1 extends string = string,
  TAccountClmmProgram extends string = string,
  TAccountNftAccount extends string = string,
  TAccountPoolState extends string = string,
  TAccountProtocolPosition extends string = string,
  TAccountPersonalPosition extends string = string,
  TAccountTokenVault0 extends string = string,
  TAccountTokenVault1 extends string = string,
  TAccountTickArrayLower extends string = string,
  TAccountTickArrayUpper extends string = string,
  TAccountRecipientTokenAccount0 extends string = string,
  TAccountRecipientTokenAccount1 extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountTokenProgram2022 extends string = string,
  TAccountMemoProgram extends string = string,
  TAccountVault0Mint extends string = string,
  TAccountVault1Mint extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  config: Address<TAccountConfig>;
  raydiumProtocolPosition: Address<TAccountRaydiumProtocolPosition>;
  raydiumUserPosition: Address<TAccountRaydiumUserPosition>;
  positionVault0: Address<TAccountPositionVault0>;
  positionVault1: Address<TAccountPositionVault1>;
  clmmProgram?: Address<TAccountClmmProgram>;
  /** The token account for nft */
  nftAccount: Address<TAccountNftAccount>;
  poolState: Address<TAccountPoolState>;
  protocolPosition: Address<TAccountProtocolPosition>;
  /** Increase liquidity for this position */
  personalPosition: Address<TAccountPersonalPosition>;
  /** The address that holds pool tokens for token_0 */
  tokenVault0: Address<TAccountTokenVault0>;
  /** The address that holds pool tokens for token_1 */
  tokenVault1: Address<TAccountTokenVault1>;
  /** Stores init state for the lower tick */
  tickArrayLower: Address<TAccountTickArrayLower>;
  /** Stores init state for the upper tick */
  tickArrayUpper: Address<TAccountTickArrayUpper>;
  /** The destination token account for receive amount_0 */
  recipientTokenAccount0: Address<TAccountRecipientTokenAccount0>;
  /** The destination token account for receive amount_1 */
  recipientTokenAccount1: Address<TAccountRecipientTokenAccount1>;
  /** Program to create mint account and mint tokens */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Token program 2022 */
  tokenProgram2022?: Address<TAccountTokenProgram2022>;
  /** memo program */
  memoProgram: Address<TAccountMemoProgram>;
  /** The mint of token vault 0 */
  vault0Mint: Address<TAccountVault0Mint>;
  /** The mint of token vault 1 */
  vault1Mint: Address<TAccountVault1Mint>;
};

export function getHarvestRaydiumPositionInstruction<
  TAccountSigner extends string,
  TAccountConfig extends string,
  TAccountRaydiumProtocolPosition extends string,
  TAccountRaydiumUserPosition extends string,
  TAccountPositionVault0 extends string,
  TAccountPositionVault1 extends string,
  TAccountClmmProgram extends string,
  TAccountNftAccount extends string,
  TAccountPoolState extends string,
  TAccountProtocolPosition extends string,
  TAccountPersonalPosition extends string,
  TAccountTokenVault0 extends string,
  TAccountTokenVault1 extends string,
  TAccountTickArrayLower extends string,
  TAccountTickArrayUpper extends string,
  TAccountRecipientTokenAccount0 extends string,
  TAccountRecipientTokenAccount1 extends string,
  TAccountTokenProgram extends string,
  TAccountTokenProgram2022 extends string,
  TAccountMemoProgram extends string,
  TAccountVault0Mint extends string,
  TAccountVault1Mint extends string,
  TProgramAddress extends Address = typeof LIQUIDITY_PROXY_PROGRAM_ADDRESS,
>(
  input: HarvestRaydiumPositionInput<
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountRaydiumUserPosition,
    TAccountPositionVault0,
    TAccountPositionVault1,
    TAccountClmmProgram,
    TAccountNftAccount,
    TAccountPoolState,
    TAccountProtocolPosition,
    TAccountPersonalPosition,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountRecipientTokenAccount0,
    TAccountRecipientTokenAccount1,
    TAccountTokenProgram,
    TAccountTokenProgram2022,
    TAccountMemoProgram,
    TAccountVault0Mint,
    TAccountVault1Mint
  >,
  config?: { programAddress?: TProgramAddress }
): HarvestRaydiumPositionInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountConfig,
  TAccountRaydiumProtocolPosition,
  TAccountRaydiumUserPosition,
  TAccountPositionVault0,
  TAccountPositionVault1,
  TAccountClmmProgram,
  TAccountNftAccount,
  TAccountPoolState,
  TAccountProtocolPosition,
  TAccountPersonalPosition,
  TAccountTokenVault0,
  TAccountTokenVault1,
  TAccountTickArrayLower,
  TAccountTickArrayUpper,
  TAccountRecipientTokenAccount0,
  TAccountRecipientTokenAccount1,
  TAccountTokenProgram,
  TAccountTokenProgram2022,
  TAccountMemoProgram,
  TAccountVault0Mint,
  TAccountVault1Mint
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LIQUIDITY_PROXY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    raydiumProtocolPosition: {
      value: input.raydiumProtocolPosition ?? null,
      isWritable: true,
    },
    raydiumUserPosition: {
      value: input.raydiumUserPosition ?? null,
      isWritable: true,
    },
    positionVault0: { value: input.positionVault0 ?? null, isWritable: true },
    positionVault1: { value: input.positionVault1 ?? null, isWritable: true },
    clmmProgram: { value: input.clmmProgram ?? null, isWritable: false },
    nftAccount: { value: input.nftAccount ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    protocolPosition: {
      value: input.protocolPosition ?? null,
      isWritable: true,
    },
    personalPosition: {
      value: input.personalPosition ?? null,
      isWritable: true,
    },
    tokenVault0: { value: input.tokenVault0 ?? null, isWritable: true },
    tokenVault1: { value: input.tokenVault1 ?? null, isWritable: true },
    tickArrayLower: { value: input.tickArrayLower ?? null, isWritable: true },
    tickArrayUpper: { value: input.tickArrayUpper ?? null, isWritable: true },
    recipientTokenAccount0: {
      value: input.recipientTokenAccount0 ?? null,
      isWritable: true,
    },
    recipientTokenAccount1: {
      value: input.recipientTokenAccount1 ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    tokenProgram2022: {
      value: input.tokenProgram2022 ?? null,
      isWritable: false,
    },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
    vault0Mint: { value: input.vault0Mint ?? null, isWritable: false },
    vault1Mint: { value: input.vault1Mint ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.clmmProgram.value) {
    accounts.clmmProgram.value =
      'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK' as Address<'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.tokenProgram2022.value) {
    accounts.tokenProgram2022.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.raydiumProtocolPosition),
      getAccountMeta(accounts.raydiumUserPosition),
      getAccountMeta(accounts.positionVault0),
      getAccountMeta(accounts.positionVault1),
      getAccountMeta(accounts.clmmProgram),
      getAccountMeta(accounts.nftAccount),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.protocolPosition),
      getAccountMeta(accounts.personalPosition),
      getAccountMeta(accounts.tokenVault0),
      getAccountMeta(accounts.tokenVault1),
      getAccountMeta(accounts.tickArrayLower),
      getAccountMeta(accounts.tickArrayUpper),
      getAccountMeta(accounts.recipientTokenAccount0),
      getAccountMeta(accounts.recipientTokenAccount1),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.tokenProgram2022),
      getAccountMeta(accounts.memoProgram),
      getAccountMeta(accounts.vault0Mint),
      getAccountMeta(accounts.vault1Mint),
    ],
    programAddress,
    data: getHarvestRaydiumPositionInstructionDataEncoder().encode({}),
  } as HarvestRaydiumPositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountRaydiumUserPosition,
    TAccountPositionVault0,
    TAccountPositionVault1,
    TAccountClmmProgram,
    TAccountNftAccount,
    TAccountPoolState,
    TAccountProtocolPosition,
    TAccountPersonalPosition,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountRecipientTokenAccount0,
    TAccountRecipientTokenAccount1,
    TAccountTokenProgram,
    TAccountTokenProgram2022,
    TAccountMemoProgram,
    TAccountVault0Mint,
    TAccountVault1Mint
  >;

  return instruction;
}

export type ParsedHarvestRaydiumPositionInstruction<
  TProgram extends string = typeof LIQUIDITY_PROXY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    config: TAccountMetas[1];
    raydiumProtocolPosition: TAccountMetas[2];
    raydiumUserPosition: TAccountMetas[3];
    positionVault0: TAccountMetas[4];
    positionVault1: TAccountMetas[5];
    clmmProgram: TAccountMetas[6];
    /** The token account for nft */
    nftAccount: TAccountMetas[7];
    poolState: TAccountMetas[8];
    protocolPosition: TAccountMetas[9];
    /** Increase liquidity for this position */
    personalPosition: TAccountMetas[10];
    /** The address that holds pool tokens for token_0 */
    tokenVault0: TAccountMetas[11];
    /** The address that holds pool tokens for token_1 */
    tokenVault1: TAccountMetas[12];
    /** Stores init state for the lower tick */
    tickArrayLower: TAccountMetas[13];
    /** Stores init state for the upper tick */
    tickArrayUpper: TAccountMetas[14];
    /** The destination token account for receive amount_0 */
    recipientTokenAccount0: TAccountMetas[15];
    /** The destination token account for receive amount_1 */
    recipientTokenAccount1: TAccountMetas[16];
    /** Program to create mint account and mint tokens */
    tokenProgram: TAccountMetas[17];
    /** Token program 2022 */
    tokenProgram2022: TAccountMetas[18];
    /** memo program */
    memoProgram: TAccountMetas[19];
    /** The mint of token vault 0 */
    vault0Mint: TAccountMetas[20];
    /** The mint of token vault 1 */
    vault1Mint: TAccountMetas[21];
  };
  data: HarvestRaydiumPositionInstructionData;
};

export function parseHarvestRaydiumPositionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedHarvestRaydiumPositionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 22) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      config: getNextAccount(),
      raydiumProtocolPosition: getNextAccount(),
      raydiumUserPosition: getNextAccount(),
      positionVault0: getNextAccount(),
      positionVault1: getNextAccount(),
      clmmProgram: getNextAccount(),
      nftAccount: getNextAccount(),
      poolState: getNextAccount(),
      protocolPosition: getNextAccount(),
      personalPosition: getNextAccount(),
      tokenVault0: getNextAccount(),
      tokenVault1: getNextAccount(),
      tickArrayLower: getNextAccount(),
      tickArrayUpper: getNextAccount(),
      recipientTokenAccount0: getNextAccount(),
      recipientTokenAccount1: getNextAccount(),
      tokenProgram: getNextAccount(),
      tokenProgram2022: getNextAccount(),
      memoProgram: getNextAccount(),
      vault0Mint: getNextAccount(),
      vault1Mint: getNextAccount(),
    },
    data: getHarvestRaydiumPositionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
