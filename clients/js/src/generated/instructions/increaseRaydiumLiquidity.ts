/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LIQUIDITY_PROXY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INCREASE_RAYDIUM_LIQUIDITY_DISCRIMINATOR = new Uint8Array([
  43, 27, 234, 87, 88, 152, 169, 189,
]);

export function getIncreaseRaydiumLiquidityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INCREASE_RAYDIUM_LIQUIDITY_DISCRIMINATOR
  );
}

export type IncreaseRaydiumLiquidityInstruction<
  TProgram extends string = typeof LIQUIDITY_PROXY_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountRaydiumProtocolPosition extends
    | string
    | IAccountMeta<string> = string,
  TAccountRaydiumUserPosition extends string | IAccountMeta<string> = string,
  TAccountPositionVault0 extends string | IAccountMeta<string> = string,
  TAccountPositionVault1 extends string | IAccountMeta<string> = string,
  TAccountClmmProgram extends
    | string
    | IAccountMeta<string> = 'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK',
  TAccountNftAccount extends string | IAccountMeta<string> = string,
  TAccountPoolState extends string | IAccountMeta<string> = string,
  TAccountProtocolPosition extends string | IAccountMeta<string> = string,
  TAccountPersonalPosition extends string | IAccountMeta<string> = string,
  TAccountTickArrayLower extends string | IAccountMeta<string> = string,
  TAccountTickArrayUpper extends string | IAccountMeta<string> = string,
  TAccountTokenAccount0 extends string | IAccountMeta<string> = string,
  TAccountTokenAccount1 extends string | IAccountMeta<string> = string,
  TAccountTokenVault0 extends string | IAccountMeta<string> = string,
  TAccountTokenVault1 extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountTokenProgram2022 extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountVault0Mint extends string | IAccountMeta<string> = string,
  TAccountVault1Mint extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountRaydiumProtocolPosition extends string
        ? WritableAccount<TAccountRaydiumProtocolPosition>
        : TAccountRaydiumProtocolPosition,
      TAccountRaydiumUserPosition extends string
        ? WritableAccount<TAccountRaydiumUserPosition>
        : TAccountRaydiumUserPosition,
      TAccountPositionVault0 extends string
        ? WritableAccount<TAccountPositionVault0>
        : TAccountPositionVault0,
      TAccountPositionVault1 extends string
        ? WritableAccount<TAccountPositionVault1>
        : TAccountPositionVault1,
      TAccountClmmProgram extends string
        ? ReadonlyAccount<TAccountClmmProgram>
        : TAccountClmmProgram,
      TAccountNftAccount extends string
        ? WritableAccount<TAccountNftAccount>
        : TAccountNftAccount,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountProtocolPosition extends string
        ? WritableAccount<TAccountProtocolPosition>
        : TAccountProtocolPosition,
      TAccountPersonalPosition extends string
        ? WritableAccount<TAccountPersonalPosition>
        : TAccountPersonalPosition,
      TAccountTickArrayLower extends string
        ? WritableAccount<TAccountTickArrayLower>
        : TAccountTickArrayLower,
      TAccountTickArrayUpper extends string
        ? WritableAccount<TAccountTickArrayUpper>
        : TAccountTickArrayUpper,
      TAccountTokenAccount0 extends string
        ? WritableAccount<TAccountTokenAccount0>
        : TAccountTokenAccount0,
      TAccountTokenAccount1 extends string
        ? WritableAccount<TAccountTokenAccount1>
        : TAccountTokenAccount1,
      TAccountTokenVault0 extends string
        ? WritableAccount<TAccountTokenVault0>
        : TAccountTokenVault0,
      TAccountTokenVault1 extends string
        ? WritableAccount<TAccountTokenVault1>
        : TAccountTokenVault1,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountTokenProgram2022 extends string
        ? ReadonlyAccount<TAccountTokenProgram2022>
        : TAccountTokenProgram2022,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountVault0Mint extends string
        ? WritableAccount<TAccountVault0Mint>
        : TAccountVault0Mint,
      TAccountVault1Mint extends string
        ? WritableAccount<TAccountVault1Mint>
        : TAccountVault1Mint,
      ...TRemainingAccounts,
    ]
  >;

export type IncreaseRaydiumLiquidityInstructionData = {
  discriminator: ReadonlyUint8Array;
  reciever: Address;
  liquidity: bigint;
  amount0Max: bigint;
  amount1Max: bigint;
  baseFlag: Option<boolean>;
};

export type IncreaseRaydiumLiquidityInstructionDataArgs = {
  reciever: Address;
  liquidity: number | bigint;
  amount0Max: number | bigint;
  amount1Max: number | bigint;
  baseFlag: OptionOrNullable<boolean>;
};

export function getIncreaseRaydiumLiquidityInstructionDataEncoder(): Encoder<IncreaseRaydiumLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['reciever', getAddressEncoder()],
      ['liquidity', getU128Encoder()],
      ['amount0Max', getU64Encoder()],
      ['amount1Max', getU64Encoder()],
      ['baseFlag', getOptionEncoder(getBooleanEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: INCREASE_RAYDIUM_LIQUIDITY_DISCRIMINATOR,
    })
  );
}

export function getIncreaseRaydiumLiquidityInstructionDataDecoder(): Decoder<IncreaseRaydiumLiquidityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['reciever', getAddressDecoder()],
    ['liquidity', getU128Decoder()],
    ['amount0Max', getU64Decoder()],
    ['amount1Max', getU64Decoder()],
    ['baseFlag', getOptionDecoder(getBooleanDecoder())],
  ]);
}

export function getIncreaseRaydiumLiquidityInstructionDataCodec(): Codec<
  IncreaseRaydiumLiquidityInstructionDataArgs,
  IncreaseRaydiumLiquidityInstructionData
> {
  return combineCodec(
    getIncreaseRaydiumLiquidityInstructionDataEncoder(),
    getIncreaseRaydiumLiquidityInstructionDataDecoder()
  );
}

export type IncreaseRaydiumLiquidityAsyncInput<
  TAccountSigner extends string = string,
  TAccountConfig extends string = string,
  TAccountRaydiumProtocolPosition extends string = string,
  TAccountRaydiumUserPosition extends string = string,
  TAccountPositionVault0 extends string = string,
  TAccountPositionVault1 extends string = string,
  TAccountClmmProgram extends string = string,
  TAccountNftAccount extends string = string,
  TAccountPoolState extends string = string,
  TAccountProtocolPosition extends string = string,
  TAccountPersonalPosition extends string = string,
  TAccountTickArrayLower extends string = string,
  TAccountTickArrayUpper extends string = string,
  TAccountTokenAccount0 extends string = string,
  TAccountTokenAccount1 extends string = string,
  TAccountTokenVault0 extends string = string,
  TAccountTokenVault1 extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountTokenProgram2022 extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountVault0Mint extends string = string,
  TAccountVault1Mint extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  config: Address<TAccountConfig>;
  raydiumProtocolPosition: Address<TAccountRaydiumProtocolPosition>;
  raydiumUserPosition?: Address<TAccountRaydiumUserPosition>;
  positionVault0: Address<TAccountPositionVault0>;
  positionVault1: Address<TAccountPositionVault1>;
  clmmProgram?: Address<TAccountClmmProgram>;
  /** The token account for nft */
  nftAccount: Address<TAccountNftAccount>;
  poolState: Address<TAccountPoolState>;
  protocolPosition: Address<TAccountProtocolPosition>;
  /** Increase liquidity for this position */
  personalPosition: Address<TAccountPersonalPosition>;
  /** Stores init state for the lower tick */
  tickArrayLower: Address<TAccountTickArrayLower>;
  /** Stores init state for the upper tick */
  tickArrayUpper: Address<TAccountTickArrayUpper>;
  /** The payer's token account for token_0 */
  tokenAccount0: Address<TAccountTokenAccount0>;
  /** The token account spending token_1 to mint the position */
  tokenAccount1: Address<TAccountTokenAccount1>;
  /** The address that holds pool tokens for token_0 */
  tokenVault0: Address<TAccountTokenVault0>;
  /** The address that holds pool tokens for token_1 */
  tokenVault1: Address<TAccountTokenVault1>;
  /** Program to create mint account and mint tokens */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Token program 2022 */
  tokenProgram2022?: Address<TAccountTokenProgram2022>;
  systemProgram?: Address<TAccountSystemProgram>;
  /** The mint of token vault 0 */
  vault0Mint: Address<TAccountVault0Mint>;
  /** The mint of token vault 1 */
  vault1Mint: Address<TAccountVault1Mint>;
  reciever: IncreaseRaydiumLiquidityInstructionDataArgs['reciever'];
  liquidity: IncreaseRaydiumLiquidityInstructionDataArgs['liquidity'];
  amount0Max: IncreaseRaydiumLiquidityInstructionDataArgs['amount0Max'];
  amount1Max: IncreaseRaydiumLiquidityInstructionDataArgs['amount1Max'];
  baseFlag: IncreaseRaydiumLiquidityInstructionDataArgs['baseFlag'];
};

export async function getIncreaseRaydiumLiquidityInstructionAsync<
  TAccountSigner extends string,
  TAccountConfig extends string,
  TAccountRaydiumProtocolPosition extends string,
  TAccountRaydiumUserPosition extends string,
  TAccountPositionVault0 extends string,
  TAccountPositionVault1 extends string,
  TAccountClmmProgram extends string,
  TAccountNftAccount extends string,
  TAccountPoolState extends string,
  TAccountProtocolPosition extends string,
  TAccountPersonalPosition extends string,
  TAccountTickArrayLower extends string,
  TAccountTickArrayUpper extends string,
  TAccountTokenAccount0 extends string,
  TAccountTokenAccount1 extends string,
  TAccountTokenVault0 extends string,
  TAccountTokenVault1 extends string,
  TAccountTokenProgram extends string,
  TAccountTokenProgram2022 extends string,
  TAccountSystemProgram extends string,
  TAccountVault0Mint extends string,
  TAccountVault1Mint extends string,
  TProgramAddress extends Address = typeof LIQUIDITY_PROXY_PROGRAM_ADDRESS,
>(
  input: IncreaseRaydiumLiquidityAsyncInput<
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountRaydiumUserPosition,
    TAccountPositionVault0,
    TAccountPositionVault1,
    TAccountClmmProgram,
    TAccountNftAccount,
    TAccountPoolState,
    TAccountProtocolPosition,
    TAccountPersonalPosition,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountTokenAccount0,
    TAccountTokenAccount1,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountTokenProgram,
    TAccountTokenProgram2022,
    TAccountSystemProgram,
    TAccountVault0Mint,
    TAccountVault1Mint
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  IncreaseRaydiumLiquidityInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountRaydiumUserPosition,
    TAccountPositionVault0,
    TAccountPositionVault1,
    TAccountClmmProgram,
    TAccountNftAccount,
    TAccountPoolState,
    TAccountProtocolPosition,
    TAccountPersonalPosition,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountTokenAccount0,
    TAccountTokenAccount1,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountTokenProgram,
    TAccountTokenProgram2022,
    TAccountSystemProgram,
    TAccountVault0Mint,
    TAccountVault1Mint
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LIQUIDITY_PROXY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    raydiumProtocolPosition: {
      value: input.raydiumProtocolPosition ?? null,
      isWritable: true,
    },
    raydiumUserPosition: {
      value: input.raydiumUserPosition ?? null,
      isWritable: true,
    },
    positionVault0: { value: input.positionVault0 ?? null, isWritable: true },
    positionVault1: { value: input.positionVault1 ?? null, isWritable: true },
    clmmProgram: { value: input.clmmProgram ?? null, isWritable: false },
    nftAccount: { value: input.nftAccount ?? null, isWritable: true },
    poolState: { value: input.poolState ?? null, isWritable: true },
    protocolPosition: {
      value: input.protocolPosition ?? null,
      isWritable: true,
    },
    personalPosition: {
      value: input.personalPosition ?? null,
      isWritable: true,
    },
    tickArrayLower: { value: input.tickArrayLower ?? null, isWritable: true },
    tickArrayUpper: { value: input.tickArrayUpper ?? null, isWritable: true },
    tokenAccount0: { value: input.tokenAccount0 ?? null, isWritable: true },
    tokenAccount1: { value: input.tokenAccount1 ?? null, isWritable: true },
    tokenVault0: { value: input.tokenVault0 ?? null, isWritable: true },
    tokenVault1: { value: input.tokenVault1 ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    tokenProgram2022: {
      value: input.tokenProgram2022 ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    vault0Mint: { value: input.vault0Mint ?? null, isWritable: true },
    vault1Mint: { value: input.vault1Mint ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.raydiumUserPosition.value) {
    accounts.raydiumUserPosition.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 97, 121, 100, 105, 117, 109, 95, 117, 115, 101, 114, 95, 112,
            111, 115, 105, 116, 105, 111, 110,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.raydiumProtocolPosition.value)
        ),
        getAddressEncoder().encode(expectSome(args.reciever)),
      ],
    });
  }
  if (!accounts.clmmProgram.value) {
    accounts.clmmProgram.value =
      'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK' as Address<'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.tokenProgram2022.value) {
    accounts.tokenProgram2022.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.raydiumProtocolPosition),
      getAccountMeta(accounts.raydiumUserPosition),
      getAccountMeta(accounts.positionVault0),
      getAccountMeta(accounts.positionVault1),
      getAccountMeta(accounts.clmmProgram),
      getAccountMeta(accounts.nftAccount),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.protocolPosition),
      getAccountMeta(accounts.personalPosition),
      getAccountMeta(accounts.tickArrayLower),
      getAccountMeta(accounts.tickArrayUpper),
      getAccountMeta(accounts.tokenAccount0),
      getAccountMeta(accounts.tokenAccount1),
      getAccountMeta(accounts.tokenVault0),
      getAccountMeta(accounts.tokenVault1),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.tokenProgram2022),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.vault0Mint),
      getAccountMeta(accounts.vault1Mint),
    ],
    programAddress,
    data: getIncreaseRaydiumLiquidityInstructionDataEncoder().encode(
      args as IncreaseRaydiumLiquidityInstructionDataArgs
    ),
  } as IncreaseRaydiumLiquidityInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountRaydiumUserPosition,
    TAccountPositionVault0,
    TAccountPositionVault1,
    TAccountClmmProgram,
    TAccountNftAccount,
    TAccountPoolState,
    TAccountProtocolPosition,
    TAccountPersonalPosition,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountTokenAccount0,
    TAccountTokenAccount1,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountTokenProgram,
    TAccountTokenProgram2022,
    TAccountSystemProgram,
    TAccountVault0Mint,
    TAccountVault1Mint
  >;

  return instruction;
}

export type IncreaseRaydiumLiquidityInput<
  TAccountSigner extends string = string,
  TAccountConfig extends string = string,
  TAccountRaydiumProtocolPosition extends string = string,
  TAccountRaydiumUserPosition extends string = string,
  TAccountPositionVault0 extends string = string,
  TAccountPositionVault1 extends string = string,
  TAccountClmmProgram extends string = string,
  TAccountNftAccount extends string = string,
  TAccountPoolState extends string = string,
  TAccountProtocolPosition extends string = string,
  TAccountPersonalPosition extends string = string,
  TAccountTickArrayLower extends string = string,
  TAccountTickArrayUpper extends string = string,
  TAccountTokenAccount0 extends string = string,
  TAccountTokenAccount1 extends string = string,
  TAccountTokenVault0 extends string = string,
  TAccountTokenVault1 extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountTokenProgram2022 extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountVault0Mint extends string = string,
  TAccountVault1Mint extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  config: Address<TAccountConfig>;
  raydiumProtocolPosition: Address<TAccountRaydiumProtocolPosition>;
  raydiumUserPosition: Address<TAccountRaydiumUserPosition>;
  positionVault0: Address<TAccountPositionVault0>;
  positionVault1: Address<TAccountPositionVault1>;
  clmmProgram?: Address<TAccountClmmProgram>;
  /** The token account for nft */
  nftAccount: Address<TAccountNftAccount>;
  poolState: Address<TAccountPoolState>;
  protocolPosition: Address<TAccountProtocolPosition>;
  /** Increase liquidity for this position */
  personalPosition: Address<TAccountPersonalPosition>;
  /** Stores init state for the lower tick */
  tickArrayLower: Address<TAccountTickArrayLower>;
  /** Stores init state for the upper tick */
  tickArrayUpper: Address<TAccountTickArrayUpper>;
  /** The payer's token account for token_0 */
  tokenAccount0: Address<TAccountTokenAccount0>;
  /** The token account spending token_1 to mint the position */
  tokenAccount1: Address<TAccountTokenAccount1>;
  /** The address that holds pool tokens for token_0 */
  tokenVault0: Address<TAccountTokenVault0>;
  /** The address that holds pool tokens for token_1 */
  tokenVault1: Address<TAccountTokenVault1>;
  /** Program to create mint account and mint tokens */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Token program 2022 */
  tokenProgram2022?: Address<TAccountTokenProgram2022>;
  systemProgram?: Address<TAccountSystemProgram>;
  /** The mint of token vault 0 */
  vault0Mint: Address<TAccountVault0Mint>;
  /** The mint of token vault 1 */
  vault1Mint: Address<TAccountVault1Mint>;
  reciever: IncreaseRaydiumLiquidityInstructionDataArgs['reciever'];
  liquidity: IncreaseRaydiumLiquidityInstructionDataArgs['liquidity'];
  amount0Max: IncreaseRaydiumLiquidityInstructionDataArgs['amount0Max'];
  amount1Max: IncreaseRaydiumLiquidityInstructionDataArgs['amount1Max'];
  baseFlag: IncreaseRaydiumLiquidityInstructionDataArgs['baseFlag'];
};

export function getIncreaseRaydiumLiquidityInstruction<
  TAccountSigner extends string,
  TAccountConfig extends string,
  TAccountRaydiumProtocolPosition extends string,
  TAccountRaydiumUserPosition extends string,
  TAccountPositionVault0 extends string,
  TAccountPositionVault1 extends string,
  TAccountClmmProgram extends string,
  TAccountNftAccount extends string,
  TAccountPoolState extends string,
  TAccountProtocolPosition extends string,
  TAccountPersonalPosition extends string,
  TAccountTickArrayLower extends string,
  TAccountTickArrayUpper extends string,
  TAccountTokenAccount0 extends string,
  TAccountTokenAccount1 extends string,
  TAccountTokenVault0 extends string,
  TAccountTokenVault1 extends string,
  TAccountTokenProgram extends string,
  TAccountTokenProgram2022 extends string,
  TAccountSystemProgram extends string,
  TAccountVault0Mint extends string,
  TAccountVault1Mint extends string,
  TProgramAddress extends Address = typeof LIQUIDITY_PROXY_PROGRAM_ADDRESS,
>(
  input: IncreaseRaydiumLiquidityInput<
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountRaydiumUserPosition,
    TAccountPositionVault0,
    TAccountPositionVault1,
    TAccountClmmProgram,
    TAccountNftAccount,
    TAccountPoolState,
    TAccountProtocolPosition,
    TAccountPersonalPosition,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountTokenAccount0,
    TAccountTokenAccount1,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountTokenProgram,
    TAccountTokenProgram2022,
    TAccountSystemProgram,
    TAccountVault0Mint,
    TAccountVault1Mint
  >,
  config?: { programAddress?: TProgramAddress }
): IncreaseRaydiumLiquidityInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountConfig,
  TAccountRaydiumProtocolPosition,
  TAccountRaydiumUserPosition,
  TAccountPositionVault0,
  TAccountPositionVault1,
  TAccountClmmProgram,
  TAccountNftAccount,
  TAccountPoolState,
  TAccountProtocolPosition,
  TAccountPersonalPosition,
  TAccountTickArrayLower,
  TAccountTickArrayUpper,
  TAccountTokenAccount0,
  TAccountTokenAccount1,
  TAccountTokenVault0,
  TAccountTokenVault1,
  TAccountTokenProgram,
  TAccountTokenProgram2022,
  TAccountSystemProgram,
  TAccountVault0Mint,
  TAccountVault1Mint
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LIQUIDITY_PROXY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    raydiumProtocolPosition: {
      value: input.raydiumProtocolPosition ?? null,
      isWritable: true,
    },
    raydiumUserPosition: {
      value: input.raydiumUserPosition ?? null,
      isWritable: true,
    },
    positionVault0: { value: input.positionVault0 ?? null, isWritable: true },
    positionVault1: { value: input.positionVault1 ?? null, isWritable: true },
    clmmProgram: { value: input.clmmProgram ?? null, isWritable: false },
    nftAccount: { value: input.nftAccount ?? null, isWritable: true },
    poolState: { value: input.poolState ?? null, isWritable: true },
    protocolPosition: {
      value: input.protocolPosition ?? null,
      isWritable: true,
    },
    personalPosition: {
      value: input.personalPosition ?? null,
      isWritable: true,
    },
    tickArrayLower: { value: input.tickArrayLower ?? null, isWritable: true },
    tickArrayUpper: { value: input.tickArrayUpper ?? null, isWritable: true },
    tokenAccount0: { value: input.tokenAccount0 ?? null, isWritable: true },
    tokenAccount1: { value: input.tokenAccount1 ?? null, isWritable: true },
    tokenVault0: { value: input.tokenVault0 ?? null, isWritable: true },
    tokenVault1: { value: input.tokenVault1 ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    tokenProgram2022: {
      value: input.tokenProgram2022 ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    vault0Mint: { value: input.vault0Mint ?? null, isWritable: true },
    vault1Mint: { value: input.vault1Mint ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clmmProgram.value) {
    accounts.clmmProgram.value =
      'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK' as Address<'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.tokenProgram2022.value) {
    accounts.tokenProgram2022.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.raydiumProtocolPosition),
      getAccountMeta(accounts.raydiumUserPosition),
      getAccountMeta(accounts.positionVault0),
      getAccountMeta(accounts.positionVault1),
      getAccountMeta(accounts.clmmProgram),
      getAccountMeta(accounts.nftAccount),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.protocolPosition),
      getAccountMeta(accounts.personalPosition),
      getAccountMeta(accounts.tickArrayLower),
      getAccountMeta(accounts.tickArrayUpper),
      getAccountMeta(accounts.tokenAccount0),
      getAccountMeta(accounts.tokenAccount1),
      getAccountMeta(accounts.tokenVault0),
      getAccountMeta(accounts.tokenVault1),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.tokenProgram2022),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.vault0Mint),
      getAccountMeta(accounts.vault1Mint),
    ],
    programAddress,
    data: getIncreaseRaydiumLiquidityInstructionDataEncoder().encode(
      args as IncreaseRaydiumLiquidityInstructionDataArgs
    ),
  } as IncreaseRaydiumLiquidityInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountRaydiumUserPosition,
    TAccountPositionVault0,
    TAccountPositionVault1,
    TAccountClmmProgram,
    TAccountNftAccount,
    TAccountPoolState,
    TAccountProtocolPosition,
    TAccountPersonalPosition,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountTokenAccount0,
    TAccountTokenAccount1,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountTokenProgram,
    TAccountTokenProgram2022,
    TAccountSystemProgram,
    TAccountVault0Mint,
    TAccountVault1Mint
  >;

  return instruction;
}

export type ParsedIncreaseRaydiumLiquidityInstruction<
  TProgram extends string = typeof LIQUIDITY_PROXY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    config: TAccountMetas[1];
    raydiumProtocolPosition: TAccountMetas[2];
    raydiumUserPosition: TAccountMetas[3];
    positionVault0: TAccountMetas[4];
    positionVault1: TAccountMetas[5];
    clmmProgram: TAccountMetas[6];
    /** The token account for nft */
    nftAccount: TAccountMetas[7];
    poolState: TAccountMetas[8];
    protocolPosition: TAccountMetas[9];
    /** Increase liquidity for this position */
    personalPosition: TAccountMetas[10];
    /** Stores init state for the lower tick */
    tickArrayLower: TAccountMetas[11];
    /** Stores init state for the upper tick */
    tickArrayUpper: TAccountMetas[12];
    /** The payer's token account for token_0 */
    tokenAccount0: TAccountMetas[13];
    /** The token account spending token_1 to mint the position */
    tokenAccount1: TAccountMetas[14];
    /** The address that holds pool tokens for token_0 */
    tokenVault0: TAccountMetas[15];
    /** The address that holds pool tokens for token_1 */
    tokenVault1: TAccountMetas[16];
    /** Program to create mint account and mint tokens */
    tokenProgram: TAccountMetas[17];
    /** Token program 2022 */
    tokenProgram2022: TAccountMetas[18];
    systemProgram: TAccountMetas[19];
    /** The mint of token vault 0 */
    vault0Mint: TAccountMetas[20];
    /** The mint of token vault 1 */
    vault1Mint: TAccountMetas[21];
  };
  data: IncreaseRaydiumLiquidityInstructionData;
};

export function parseIncreaseRaydiumLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedIncreaseRaydiumLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 22) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      config: getNextAccount(),
      raydiumProtocolPosition: getNextAccount(),
      raydiumUserPosition: getNextAccount(),
      positionVault0: getNextAccount(),
      positionVault1: getNextAccount(),
      clmmProgram: getNextAccount(),
      nftAccount: getNextAccount(),
      poolState: getNextAccount(),
      protocolPosition: getNextAccount(),
      personalPosition: getNextAccount(),
      tickArrayLower: getNextAccount(),
      tickArrayUpper: getNextAccount(),
      tokenAccount0: getNextAccount(),
      tokenAccount1: getNextAccount(),
      tokenVault0: getNextAccount(),
      tokenVault1: getNextAccount(),
      tokenProgram: getNextAccount(),
      tokenProgram2022: getNextAccount(),
      systemProgram: getNextAccount(),
      vault0Mint: getNextAccount(),
      vault1Mint: getNextAccount(),
    },
    data: getIncreaseRaydiumLiquidityInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
