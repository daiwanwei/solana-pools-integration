/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LIQUIDITY_PROXY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const OPEN_RAYDIUM_POSITION_DISCRIMINATOR = new Uint8Array([
  20, 240, 112, 208, 102, 129, 214, 240,
]);

export function getOpenRaydiumPositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    OPEN_RAYDIUM_POSITION_DISCRIMINATOR
  );
}

export type OpenRaydiumPositionInstruction<
  TProgram extends string = typeof LIQUIDITY_PROXY_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountRaydiumProtocolPosition extends
    | string
    | IAccountMeta<string> = string,
  TAccountRaydiumUserPosition extends string | IAccountMeta<string> = string,
  TAccountPositionVault0 extends string | IAccountMeta<string> = string,
  TAccountPositionVault1 extends string | IAccountMeta<string> = string,
  TAccountClmmProgram extends
    | string
    | IAccountMeta<string> = 'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK',
  TAccountPositionNftMint extends string | IAccountMeta<string> = string,
  TAccountPositionNftAccount extends string | IAccountMeta<string> = string,
  TAccountMetadataAccount extends string | IAccountMeta<string> = string,
  TAccountPoolState extends string | IAccountMeta<string> = string,
  TAccountProtocolPosition extends string | IAccountMeta<string> = string,
  TAccountTickArrayLower extends string | IAccountMeta<string> = string,
  TAccountTickArrayUpper extends string | IAccountMeta<string> = string,
  TAccountPersonalPosition extends string | IAccountMeta<string> = string,
  TAccountTokenAccount0 extends string | IAccountMeta<string> = string,
  TAccountTokenAccount1 extends string | IAccountMeta<string> = string,
  TAccountTokenVault0 extends string | IAccountMeta<string> = string,
  TAccountTokenVault1 extends string | IAccountMeta<string> = string,
  TAccountVault0Mint extends string | IAccountMeta<string> = string,
  TAccountVault1Mint extends string | IAccountMeta<string> = string,
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountMetadataProgram extends
    | string
    | IAccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountTokenProgram2022 extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountRaydiumProtocolPosition extends string
        ? WritableAccount<TAccountRaydiumProtocolPosition>
        : TAccountRaydiumProtocolPosition,
      TAccountRaydiumUserPosition extends string
        ? WritableAccount<TAccountRaydiumUserPosition>
        : TAccountRaydiumUserPosition,
      TAccountPositionVault0 extends string
        ? WritableAccount<TAccountPositionVault0>
        : TAccountPositionVault0,
      TAccountPositionVault1 extends string
        ? WritableAccount<TAccountPositionVault1>
        : TAccountPositionVault1,
      TAccountClmmProgram extends string
        ? ReadonlyAccount<TAccountClmmProgram>
        : TAccountClmmProgram,
      TAccountPositionNftMint extends string
        ? WritableSignerAccount<TAccountPositionNftMint> &
            IAccountSignerMeta<TAccountPositionNftMint>
        : TAccountPositionNftMint,
      TAccountPositionNftAccount extends string
        ? WritableAccount<TAccountPositionNftAccount>
        : TAccountPositionNftAccount,
      TAccountMetadataAccount extends string
        ? WritableAccount<TAccountMetadataAccount>
        : TAccountMetadataAccount,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountProtocolPosition extends string
        ? WritableAccount<TAccountProtocolPosition>
        : TAccountProtocolPosition,
      TAccountTickArrayLower extends string
        ? WritableAccount<TAccountTickArrayLower>
        : TAccountTickArrayLower,
      TAccountTickArrayUpper extends string
        ? WritableAccount<TAccountTickArrayUpper>
        : TAccountTickArrayUpper,
      TAccountPersonalPosition extends string
        ? WritableAccount<TAccountPersonalPosition>
        : TAccountPersonalPosition,
      TAccountTokenAccount0 extends string
        ? WritableAccount<TAccountTokenAccount0>
        : TAccountTokenAccount0,
      TAccountTokenAccount1 extends string
        ? WritableAccount<TAccountTokenAccount1>
        : TAccountTokenAccount1,
      TAccountTokenVault0 extends string
        ? WritableAccount<TAccountTokenVault0>
        : TAccountTokenVault0,
      TAccountTokenVault1 extends string
        ? WritableAccount<TAccountTokenVault1>
        : TAccountTokenVault1,
      TAccountVault0Mint extends string
        ? ReadonlyAccount<TAccountVault0Mint>
        : TAccountVault0Mint,
      TAccountVault1Mint extends string
        ? ReadonlyAccount<TAccountVault1Mint>
        : TAccountVault1Mint,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountMetadataProgram extends string
        ? ReadonlyAccount<TAccountMetadataProgram>
        : TAccountMetadataProgram,
      TAccountTokenProgram2022 extends string
        ? ReadonlyAccount<TAccountTokenProgram2022>
        : TAccountTokenProgram2022,
      ...TRemainingAccounts,
    ]
  >;

export type OpenRaydiumPositionInstructionData = {
  discriminator: ReadonlyUint8Array;
  tickLowerIndex: number;
  tickUpperIndex: number;
  tickArrayLowerStartIndex: number;
  tickArrayUpperStartIndex: number;
  liquidity: bigint;
  amount0Max: bigint;
  amount1Max: bigint;
  withMatedata: boolean;
  baseFlag: Option<boolean>;
};

export type OpenRaydiumPositionInstructionDataArgs = {
  tickLowerIndex: number;
  tickUpperIndex: number;
  tickArrayLowerStartIndex: number;
  tickArrayUpperStartIndex: number;
  liquidity: number | bigint;
  amount0Max: number | bigint;
  amount1Max: number | bigint;
  withMatedata: boolean;
  baseFlag: OptionOrNullable<boolean>;
};

export function getOpenRaydiumPositionInstructionDataEncoder(): Encoder<OpenRaydiumPositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['tickLowerIndex', getI32Encoder()],
      ['tickUpperIndex', getI32Encoder()],
      ['tickArrayLowerStartIndex', getI32Encoder()],
      ['tickArrayUpperStartIndex', getI32Encoder()],
      ['liquidity', getU128Encoder()],
      ['amount0Max', getU64Encoder()],
      ['amount1Max', getU64Encoder()],
      ['withMatedata', getBooleanEncoder()],
      ['baseFlag', getOptionEncoder(getBooleanEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: OPEN_RAYDIUM_POSITION_DISCRIMINATOR,
    })
  );
}

export function getOpenRaydiumPositionInstructionDataDecoder(): Decoder<OpenRaydiumPositionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['tickLowerIndex', getI32Decoder()],
    ['tickUpperIndex', getI32Decoder()],
    ['tickArrayLowerStartIndex', getI32Decoder()],
    ['tickArrayUpperStartIndex', getI32Decoder()],
    ['liquidity', getU128Decoder()],
    ['amount0Max', getU64Decoder()],
    ['amount1Max', getU64Decoder()],
    ['withMatedata', getBooleanDecoder()],
    ['baseFlag', getOptionDecoder(getBooleanDecoder())],
  ]);
}

export function getOpenRaydiumPositionInstructionDataCodec(): Codec<
  OpenRaydiumPositionInstructionDataArgs,
  OpenRaydiumPositionInstructionData
> {
  return combineCodec(
    getOpenRaydiumPositionInstructionDataEncoder(),
    getOpenRaydiumPositionInstructionDataDecoder()
  );
}

export type OpenRaydiumPositionAsyncInput<
  TAccountSigner extends string = string,
  TAccountConfig extends string = string,
  TAccountRaydiumProtocolPosition extends string = string,
  TAccountRaydiumUserPosition extends string = string,
  TAccountPositionVault0 extends string = string,
  TAccountPositionVault1 extends string = string,
  TAccountClmmProgram extends string = string,
  TAccountPositionNftMint extends string = string,
  TAccountPositionNftAccount extends string = string,
  TAccountMetadataAccount extends string = string,
  TAccountPoolState extends string = string,
  TAccountProtocolPosition extends string = string,
  TAccountTickArrayLower extends string = string,
  TAccountTickArrayUpper extends string = string,
  TAccountPersonalPosition extends string = string,
  TAccountTokenAccount0 extends string = string,
  TAccountTokenAccount1 extends string = string,
  TAccountTokenVault0 extends string = string,
  TAccountTokenVault1 extends string = string,
  TAccountVault0Mint extends string = string,
  TAccountVault1Mint extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountMetadataProgram extends string = string,
  TAccountTokenProgram2022 extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  config: Address<TAccountConfig>;
  raydiumProtocolPosition?: Address<TAccountRaydiumProtocolPosition>;
  raydiumUserPosition?: Address<TAccountRaydiumUserPosition>;
  positionVault0?: Address<TAccountPositionVault0>;
  positionVault1?: Address<TAccountPositionVault1>;
  clmmProgram?: Address<TAccountClmmProgram>;
  positionNftMint: TransactionSigner<TAccountPositionNftMint>;
  /** This account created in the contract by cpi to avoid large stack variables */
  positionNftAccount: Address<TAccountPositionNftAccount>;
  /** To store metaplex metadata */
  metadataAccount: Address<TAccountMetadataAccount>;
  /** Add liquidity for this pool */
  poolState: Address<TAccountPoolState>;
  protocolPosition: Address<TAccountProtocolPosition>;
  tickArrayLower: Address<TAccountTickArrayLower>;
  tickArrayUpper: Address<TAccountTickArrayUpper>;
  personalPosition: Address<TAccountPersonalPosition>;
  /** The token_0 account deposit token to the pool */
  tokenAccount0: Address<TAccountTokenAccount0>;
  /** The token_1 account deposit token to the pool */
  tokenAccount1: Address<TAccountTokenAccount1>;
  /** The address that holds pool tokens for token_0 */
  tokenVault0: Address<TAccountTokenVault0>;
  /** The address that holds pool tokens for token_1 */
  tokenVault1: Address<TAccountTokenVault1>;
  /** The mint of token vault 0 */
  vault0Mint: Address<TAccountVault0Mint>;
  /** The mint of token vault 1 */
  vault1Mint: Address<TAccountVault1Mint>;
  /** Sysvar for token mint and ATA creation */
  rent?: Address<TAccountRent>;
  /** Program to create the position manager state account */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Program to create mint account and mint tokens */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Program to create an ATA for receiving position NFT */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  /** Program to create NFT metadata */
  metadataProgram?: Address<TAccountMetadataProgram>;
  /** Program to create mint account and mint tokens */
  tokenProgram2022?: Address<TAccountTokenProgram2022>;
  tickLowerIndex: OpenRaydiumPositionInstructionDataArgs['tickLowerIndex'];
  tickUpperIndex: OpenRaydiumPositionInstructionDataArgs['tickUpperIndex'];
  tickArrayLowerStartIndex: OpenRaydiumPositionInstructionDataArgs['tickArrayLowerStartIndex'];
  tickArrayUpperStartIndex: OpenRaydiumPositionInstructionDataArgs['tickArrayUpperStartIndex'];
  liquidity: OpenRaydiumPositionInstructionDataArgs['liquidity'];
  amount0Max: OpenRaydiumPositionInstructionDataArgs['amount0Max'];
  amount1Max: OpenRaydiumPositionInstructionDataArgs['amount1Max'];
  withMatedata: OpenRaydiumPositionInstructionDataArgs['withMatedata'];
  baseFlag: OpenRaydiumPositionInstructionDataArgs['baseFlag'];
};

export async function getOpenRaydiumPositionInstructionAsync<
  TAccountSigner extends string,
  TAccountConfig extends string,
  TAccountRaydiumProtocolPosition extends string,
  TAccountRaydiumUserPosition extends string,
  TAccountPositionVault0 extends string,
  TAccountPositionVault1 extends string,
  TAccountClmmProgram extends string,
  TAccountPositionNftMint extends string,
  TAccountPositionNftAccount extends string,
  TAccountMetadataAccount extends string,
  TAccountPoolState extends string,
  TAccountProtocolPosition extends string,
  TAccountTickArrayLower extends string,
  TAccountTickArrayUpper extends string,
  TAccountPersonalPosition extends string,
  TAccountTokenAccount0 extends string,
  TAccountTokenAccount1 extends string,
  TAccountTokenVault0 extends string,
  TAccountTokenVault1 extends string,
  TAccountVault0Mint extends string,
  TAccountVault1Mint extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountMetadataProgram extends string,
  TAccountTokenProgram2022 extends string,
  TProgramAddress extends Address = typeof LIQUIDITY_PROXY_PROGRAM_ADDRESS,
>(
  input: OpenRaydiumPositionAsyncInput<
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountRaydiumUserPosition,
    TAccountPositionVault0,
    TAccountPositionVault1,
    TAccountClmmProgram,
    TAccountPositionNftMint,
    TAccountPositionNftAccount,
    TAccountMetadataAccount,
    TAccountPoolState,
    TAccountProtocolPosition,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountPersonalPosition,
    TAccountTokenAccount0,
    TAccountTokenAccount1,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountVault0Mint,
    TAccountVault1Mint,
    TAccountRent,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram,
    TAccountTokenProgram2022
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  OpenRaydiumPositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountRaydiumUserPosition,
    TAccountPositionVault0,
    TAccountPositionVault1,
    TAccountClmmProgram,
    TAccountPositionNftMint,
    TAccountPositionNftAccount,
    TAccountMetadataAccount,
    TAccountPoolState,
    TAccountProtocolPosition,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountPersonalPosition,
    TAccountTokenAccount0,
    TAccountTokenAccount1,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountVault0Mint,
    TAccountVault1Mint,
    TAccountRent,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram,
    TAccountTokenProgram2022
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LIQUIDITY_PROXY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    raydiumProtocolPosition: {
      value: input.raydiumProtocolPosition ?? null,
      isWritable: true,
    },
    raydiumUserPosition: {
      value: input.raydiumUserPosition ?? null,
      isWritable: true,
    },
    positionVault0: { value: input.positionVault0 ?? null, isWritable: true },
    positionVault1: { value: input.positionVault1 ?? null, isWritable: true },
    clmmProgram: { value: input.clmmProgram ?? null, isWritable: false },
    positionNftMint: { value: input.positionNftMint ?? null, isWritable: true },
    positionNftAccount: {
      value: input.positionNftAccount ?? null,
      isWritable: true,
    },
    metadataAccount: { value: input.metadataAccount ?? null, isWritable: true },
    poolState: { value: input.poolState ?? null, isWritable: true },
    protocolPosition: {
      value: input.protocolPosition ?? null,
      isWritable: true,
    },
    tickArrayLower: { value: input.tickArrayLower ?? null, isWritable: true },
    tickArrayUpper: { value: input.tickArrayUpper ?? null, isWritable: true },
    personalPosition: {
      value: input.personalPosition ?? null,
      isWritable: true,
    },
    tokenAccount0: { value: input.tokenAccount0 ?? null, isWritable: true },
    tokenAccount1: { value: input.tokenAccount1 ?? null, isWritable: true },
    tokenVault0: { value: input.tokenVault0 ?? null, isWritable: true },
    tokenVault1: { value: input.tokenVault1 ?? null, isWritable: true },
    vault0Mint: { value: input.vault0Mint ?? null, isWritable: false },
    vault1Mint: { value: input.vault1Mint ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
    tokenProgram2022: {
      value: input.tokenProgram2022 ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.raydiumProtocolPosition.value) {
    accounts.raydiumProtocolPosition.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 97, 121, 100, 105, 117, 109, 95, 112, 114, 111, 116, 111, 99,
            111, 108, 95, 112, 111, 115, 105, 116, 105, 111, 110,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.poolState.value)),
        getI32Encoder().encode(expectSome(args.tickLowerIndex)),
        getI32Encoder().encode(expectSome(args.tickUpperIndex)),
      ],
    });
  }
  if (!accounts.raydiumUserPosition.value) {
    accounts.raydiumUserPosition.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 97, 121, 100, 105, 117, 109, 95, 117, 115, 101, 114, 95, 112,
            111, 115, 105, 116, 105, 111, 110,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.raydiumProtocolPosition.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }
  if (!accounts.positionVault0.value) {
    accounts.positionVault0.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 115, 105, 116, 105, 111, 110, 95, 118, 97, 117, 108, 116,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.raydiumProtocolPosition.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.vault0Mint.value)),
      ],
    });
  }
  if (!accounts.positionVault1.value) {
    accounts.positionVault1.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 111, 115, 105, 116, 105, 111, 110, 95, 118, 97, 117, 108, 116,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.raydiumProtocolPosition.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.vault1Mint.value)),
      ],
    });
  }
  if (!accounts.clmmProgram.value) {
    accounts.clmmProgram.value =
      'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK' as Address<'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.metadataProgram.value) {
    accounts.metadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.tokenProgram2022.value) {
    accounts.tokenProgram2022.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.raydiumProtocolPosition),
      getAccountMeta(accounts.raydiumUserPosition),
      getAccountMeta(accounts.positionVault0),
      getAccountMeta(accounts.positionVault1),
      getAccountMeta(accounts.clmmProgram),
      getAccountMeta(accounts.positionNftMint),
      getAccountMeta(accounts.positionNftAccount),
      getAccountMeta(accounts.metadataAccount),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.protocolPosition),
      getAccountMeta(accounts.tickArrayLower),
      getAccountMeta(accounts.tickArrayUpper),
      getAccountMeta(accounts.personalPosition),
      getAccountMeta(accounts.tokenAccount0),
      getAccountMeta(accounts.tokenAccount1),
      getAccountMeta(accounts.tokenVault0),
      getAccountMeta(accounts.tokenVault1),
      getAccountMeta(accounts.vault0Mint),
      getAccountMeta(accounts.vault1Mint),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.metadataProgram),
      getAccountMeta(accounts.tokenProgram2022),
    ],
    programAddress,
    data: getOpenRaydiumPositionInstructionDataEncoder().encode(
      args as OpenRaydiumPositionInstructionDataArgs
    ),
  } as OpenRaydiumPositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountRaydiumUserPosition,
    TAccountPositionVault0,
    TAccountPositionVault1,
    TAccountClmmProgram,
    TAccountPositionNftMint,
    TAccountPositionNftAccount,
    TAccountMetadataAccount,
    TAccountPoolState,
    TAccountProtocolPosition,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountPersonalPosition,
    TAccountTokenAccount0,
    TAccountTokenAccount1,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountVault0Mint,
    TAccountVault1Mint,
    TAccountRent,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram,
    TAccountTokenProgram2022
  >;

  return instruction;
}

export type OpenRaydiumPositionInput<
  TAccountSigner extends string = string,
  TAccountConfig extends string = string,
  TAccountRaydiumProtocolPosition extends string = string,
  TAccountRaydiumUserPosition extends string = string,
  TAccountPositionVault0 extends string = string,
  TAccountPositionVault1 extends string = string,
  TAccountClmmProgram extends string = string,
  TAccountPositionNftMint extends string = string,
  TAccountPositionNftAccount extends string = string,
  TAccountMetadataAccount extends string = string,
  TAccountPoolState extends string = string,
  TAccountProtocolPosition extends string = string,
  TAccountTickArrayLower extends string = string,
  TAccountTickArrayUpper extends string = string,
  TAccountPersonalPosition extends string = string,
  TAccountTokenAccount0 extends string = string,
  TAccountTokenAccount1 extends string = string,
  TAccountTokenVault0 extends string = string,
  TAccountTokenVault1 extends string = string,
  TAccountVault0Mint extends string = string,
  TAccountVault1Mint extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountMetadataProgram extends string = string,
  TAccountTokenProgram2022 extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  config: Address<TAccountConfig>;
  raydiumProtocolPosition: Address<TAccountRaydiumProtocolPosition>;
  raydiumUserPosition: Address<TAccountRaydiumUserPosition>;
  positionVault0: Address<TAccountPositionVault0>;
  positionVault1: Address<TAccountPositionVault1>;
  clmmProgram?: Address<TAccountClmmProgram>;
  positionNftMint: TransactionSigner<TAccountPositionNftMint>;
  /** This account created in the contract by cpi to avoid large stack variables */
  positionNftAccount: Address<TAccountPositionNftAccount>;
  /** To store metaplex metadata */
  metadataAccount: Address<TAccountMetadataAccount>;
  /** Add liquidity for this pool */
  poolState: Address<TAccountPoolState>;
  protocolPosition: Address<TAccountProtocolPosition>;
  tickArrayLower: Address<TAccountTickArrayLower>;
  tickArrayUpper: Address<TAccountTickArrayUpper>;
  personalPosition: Address<TAccountPersonalPosition>;
  /** The token_0 account deposit token to the pool */
  tokenAccount0: Address<TAccountTokenAccount0>;
  /** The token_1 account deposit token to the pool */
  tokenAccount1: Address<TAccountTokenAccount1>;
  /** The address that holds pool tokens for token_0 */
  tokenVault0: Address<TAccountTokenVault0>;
  /** The address that holds pool tokens for token_1 */
  tokenVault1: Address<TAccountTokenVault1>;
  /** The mint of token vault 0 */
  vault0Mint: Address<TAccountVault0Mint>;
  /** The mint of token vault 1 */
  vault1Mint: Address<TAccountVault1Mint>;
  /** Sysvar for token mint and ATA creation */
  rent?: Address<TAccountRent>;
  /** Program to create the position manager state account */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Program to create mint account and mint tokens */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Program to create an ATA for receiving position NFT */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  /** Program to create NFT metadata */
  metadataProgram?: Address<TAccountMetadataProgram>;
  /** Program to create mint account and mint tokens */
  tokenProgram2022?: Address<TAccountTokenProgram2022>;
  tickLowerIndex: OpenRaydiumPositionInstructionDataArgs['tickLowerIndex'];
  tickUpperIndex: OpenRaydiumPositionInstructionDataArgs['tickUpperIndex'];
  tickArrayLowerStartIndex: OpenRaydiumPositionInstructionDataArgs['tickArrayLowerStartIndex'];
  tickArrayUpperStartIndex: OpenRaydiumPositionInstructionDataArgs['tickArrayUpperStartIndex'];
  liquidity: OpenRaydiumPositionInstructionDataArgs['liquidity'];
  amount0Max: OpenRaydiumPositionInstructionDataArgs['amount0Max'];
  amount1Max: OpenRaydiumPositionInstructionDataArgs['amount1Max'];
  withMatedata: OpenRaydiumPositionInstructionDataArgs['withMatedata'];
  baseFlag: OpenRaydiumPositionInstructionDataArgs['baseFlag'];
};

export function getOpenRaydiumPositionInstruction<
  TAccountSigner extends string,
  TAccountConfig extends string,
  TAccountRaydiumProtocolPosition extends string,
  TAccountRaydiumUserPosition extends string,
  TAccountPositionVault0 extends string,
  TAccountPositionVault1 extends string,
  TAccountClmmProgram extends string,
  TAccountPositionNftMint extends string,
  TAccountPositionNftAccount extends string,
  TAccountMetadataAccount extends string,
  TAccountPoolState extends string,
  TAccountProtocolPosition extends string,
  TAccountTickArrayLower extends string,
  TAccountTickArrayUpper extends string,
  TAccountPersonalPosition extends string,
  TAccountTokenAccount0 extends string,
  TAccountTokenAccount1 extends string,
  TAccountTokenVault0 extends string,
  TAccountTokenVault1 extends string,
  TAccountVault0Mint extends string,
  TAccountVault1Mint extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountMetadataProgram extends string,
  TAccountTokenProgram2022 extends string,
  TProgramAddress extends Address = typeof LIQUIDITY_PROXY_PROGRAM_ADDRESS,
>(
  input: OpenRaydiumPositionInput<
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountRaydiumUserPosition,
    TAccountPositionVault0,
    TAccountPositionVault1,
    TAccountClmmProgram,
    TAccountPositionNftMint,
    TAccountPositionNftAccount,
    TAccountMetadataAccount,
    TAccountPoolState,
    TAccountProtocolPosition,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountPersonalPosition,
    TAccountTokenAccount0,
    TAccountTokenAccount1,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountVault0Mint,
    TAccountVault1Mint,
    TAccountRent,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram,
    TAccountTokenProgram2022
  >,
  config?: { programAddress?: TProgramAddress }
): OpenRaydiumPositionInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountConfig,
  TAccountRaydiumProtocolPosition,
  TAccountRaydiumUserPosition,
  TAccountPositionVault0,
  TAccountPositionVault1,
  TAccountClmmProgram,
  TAccountPositionNftMint,
  TAccountPositionNftAccount,
  TAccountMetadataAccount,
  TAccountPoolState,
  TAccountProtocolPosition,
  TAccountTickArrayLower,
  TAccountTickArrayUpper,
  TAccountPersonalPosition,
  TAccountTokenAccount0,
  TAccountTokenAccount1,
  TAccountTokenVault0,
  TAccountTokenVault1,
  TAccountVault0Mint,
  TAccountVault1Mint,
  TAccountRent,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountMetadataProgram,
  TAccountTokenProgram2022
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LIQUIDITY_PROXY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    raydiumProtocolPosition: {
      value: input.raydiumProtocolPosition ?? null,
      isWritable: true,
    },
    raydiumUserPosition: {
      value: input.raydiumUserPosition ?? null,
      isWritable: true,
    },
    positionVault0: { value: input.positionVault0 ?? null, isWritable: true },
    positionVault1: { value: input.positionVault1 ?? null, isWritable: true },
    clmmProgram: { value: input.clmmProgram ?? null, isWritable: false },
    positionNftMint: { value: input.positionNftMint ?? null, isWritable: true },
    positionNftAccount: {
      value: input.positionNftAccount ?? null,
      isWritable: true,
    },
    metadataAccount: { value: input.metadataAccount ?? null, isWritable: true },
    poolState: { value: input.poolState ?? null, isWritable: true },
    protocolPosition: {
      value: input.protocolPosition ?? null,
      isWritable: true,
    },
    tickArrayLower: { value: input.tickArrayLower ?? null, isWritable: true },
    tickArrayUpper: { value: input.tickArrayUpper ?? null, isWritable: true },
    personalPosition: {
      value: input.personalPosition ?? null,
      isWritable: true,
    },
    tokenAccount0: { value: input.tokenAccount0 ?? null, isWritable: true },
    tokenAccount1: { value: input.tokenAccount1 ?? null, isWritable: true },
    tokenVault0: { value: input.tokenVault0 ?? null, isWritable: true },
    tokenVault1: { value: input.tokenVault1 ?? null, isWritable: true },
    vault0Mint: { value: input.vault0Mint ?? null, isWritable: false },
    vault1Mint: { value: input.vault1Mint ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
    tokenProgram2022: {
      value: input.tokenProgram2022 ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clmmProgram.value) {
    accounts.clmmProgram.value =
      'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK' as Address<'CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.metadataProgram.value) {
    accounts.metadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.tokenProgram2022.value) {
    accounts.tokenProgram2022.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.raydiumProtocolPosition),
      getAccountMeta(accounts.raydiumUserPosition),
      getAccountMeta(accounts.positionVault0),
      getAccountMeta(accounts.positionVault1),
      getAccountMeta(accounts.clmmProgram),
      getAccountMeta(accounts.positionNftMint),
      getAccountMeta(accounts.positionNftAccount),
      getAccountMeta(accounts.metadataAccount),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.protocolPosition),
      getAccountMeta(accounts.tickArrayLower),
      getAccountMeta(accounts.tickArrayUpper),
      getAccountMeta(accounts.personalPosition),
      getAccountMeta(accounts.tokenAccount0),
      getAccountMeta(accounts.tokenAccount1),
      getAccountMeta(accounts.tokenVault0),
      getAccountMeta(accounts.tokenVault1),
      getAccountMeta(accounts.vault0Mint),
      getAccountMeta(accounts.vault1Mint),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.metadataProgram),
      getAccountMeta(accounts.tokenProgram2022),
    ],
    programAddress,
    data: getOpenRaydiumPositionInstructionDataEncoder().encode(
      args as OpenRaydiumPositionInstructionDataArgs
    ),
  } as OpenRaydiumPositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountRaydiumProtocolPosition,
    TAccountRaydiumUserPosition,
    TAccountPositionVault0,
    TAccountPositionVault1,
    TAccountClmmProgram,
    TAccountPositionNftMint,
    TAccountPositionNftAccount,
    TAccountMetadataAccount,
    TAccountPoolState,
    TAccountProtocolPosition,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountPersonalPosition,
    TAccountTokenAccount0,
    TAccountTokenAccount1,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountVault0Mint,
    TAccountVault1Mint,
    TAccountRent,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram,
    TAccountTokenProgram2022
  >;

  return instruction;
}

export type ParsedOpenRaydiumPositionInstruction<
  TProgram extends string = typeof LIQUIDITY_PROXY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    config: TAccountMetas[1];
    raydiumProtocolPosition: TAccountMetas[2];
    raydiumUserPosition: TAccountMetas[3];
    positionVault0: TAccountMetas[4];
    positionVault1: TAccountMetas[5];
    clmmProgram: TAccountMetas[6];
    positionNftMint: TAccountMetas[7];
    /** This account created in the contract by cpi to avoid large stack variables */
    positionNftAccount: TAccountMetas[8];
    /** To store metaplex metadata */
    metadataAccount: TAccountMetas[9];
    /** Add liquidity for this pool */
    poolState: TAccountMetas[10];
    protocolPosition: TAccountMetas[11];
    tickArrayLower: TAccountMetas[12];
    tickArrayUpper: TAccountMetas[13];
    personalPosition: TAccountMetas[14];
    /** The token_0 account deposit token to the pool */
    tokenAccount0: TAccountMetas[15];
    /** The token_1 account deposit token to the pool */
    tokenAccount1: TAccountMetas[16];
    /** The address that holds pool tokens for token_0 */
    tokenVault0: TAccountMetas[17];
    /** The address that holds pool tokens for token_1 */
    tokenVault1: TAccountMetas[18];
    /** The mint of token vault 0 */
    vault0Mint: TAccountMetas[19];
    /** The mint of token vault 1 */
    vault1Mint: TAccountMetas[20];
    /** Sysvar for token mint and ATA creation */
    rent: TAccountMetas[21];
    /** Program to create the position manager state account */
    systemProgram: TAccountMetas[22];
    /** Program to create mint account and mint tokens */
    tokenProgram: TAccountMetas[23];
    /** Program to create an ATA for receiving position NFT */
    associatedTokenProgram: TAccountMetas[24];
    /** Program to create NFT metadata */
    metadataProgram: TAccountMetas[25];
    /** Program to create mint account and mint tokens */
    tokenProgram2022: TAccountMetas[26];
  };
  data: OpenRaydiumPositionInstructionData;
};

export function parseOpenRaydiumPositionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedOpenRaydiumPositionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 27) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      config: getNextAccount(),
      raydiumProtocolPosition: getNextAccount(),
      raydiumUserPosition: getNextAccount(),
      positionVault0: getNextAccount(),
      positionVault1: getNextAccount(),
      clmmProgram: getNextAccount(),
      positionNftMint: getNextAccount(),
      positionNftAccount: getNextAccount(),
      metadataAccount: getNextAccount(),
      poolState: getNextAccount(),
      protocolPosition: getNextAccount(),
      tickArrayLower: getNextAccount(),
      tickArrayUpper: getNextAccount(),
      personalPosition: getNextAccount(),
      tokenAccount0: getNextAccount(),
      tokenAccount1: getNextAccount(),
      tokenVault0: getNextAccount(),
      tokenVault1: getNextAccount(),
      vault0Mint: getNextAccount(),
      vault1Mint: getNextAccount(),
      rent: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      metadataProgram: getNextAccount(),
      tokenProgram2022: getNextAccount(),
    },
    data: getOpenRaydiumPositionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
