/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedCloseRaydiumPositionInstruction,
  type ParsedDecreaseRaydiumLiquidityInstruction,
  type ParsedHarvestRaydiumPositionInstruction,
  type ParsedIncreaseRaydiumLiquidityInstruction,
  type ParsedInitializeConfigInstruction,
  type ParsedOpenRaydiumPositionInstruction,
} from '../instructions';

export const LIQUIDITY_PROXY_PROGRAM_ADDRESS =
  'GThwS7XKza6nKBgSMDstt1uVGrgEvfmLvkFq6C6tYdar' as Address<'GThwS7XKza6nKBgSMDstt1uVGrgEvfmLvkFq6C6tYdar'>;

export enum LiquidityProxyAccount {
  Config,
  PersonalPositionState,
  PoolState,
  ProtocolPositionState,
  RaydiumProtocolPosition,
  RaydiumUserPosition,
  TickArrayState,
}

export function identifyLiquidityProxyAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LiquidityProxyAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 12, 170, 224, 30, 250, 204, 130])
      ),
      0
    )
  ) {
    return LiquidityProxyAccount.Config;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([70, 111, 150, 126, 230, 15, 25, 117])
      ),
      0
    )
  ) {
    return LiquidityProxyAccount.PersonalPositionState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([247, 237, 227, 245, 215, 195, 222, 70])
      ),
      0
    )
  ) {
    return LiquidityProxyAccount.PoolState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([100, 226, 145, 99, 146, 218, 160, 106])
      ),
      0
    )
  ) {
    return LiquidityProxyAccount.ProtocolPositionState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([38, 10, 196, 210, 61, 165, 24, 135])
      ),
      0
    )
  ) {
    return LiquidityProxyAccount.RaydiumProtocolPosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([196, 91, 205, 134, 85, 116, 176, 104])
      ),
      0
    )
  ) {
    return LiquidityProxyAccount.RaydiumUserPosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([192, 155, 85, 205, 49, 249, 129, 42])
      ),
      0
    )
  ) {
    return LiquidityProxyAccount.TickArrayState;
  }
  throw new Error(
    'The provided account could not be identified as a liquidityProxy account.'
  );
}

export enum LiquidityProxyInstruction {
  CloseRaydiumPosition,
  DecreaseRaydiumLiquidity,
  HarvestRaydiumPosition,
  IncreaseRaydiumLiquidity,
  InitializeConfig,
  OpenRaydiumPosition,
}

export function identifyLiquidityProxyInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LiquidityProxyInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([162, 208, 2, 192, 141, 142, 245, 58])
      ),
      0
    )
  ) {
    return LiquidityProxyInstruction.CloseRaydiumPosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([71, 255, 20, 254, 238, 56, 115, 33])
      ),
      0
    )
  ) {
    return LiquidityProxyInstruction.DecreaseRaydiumLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([55, 230, 106, 177, 166, 220, 200, 80])
      ),
      0
    )
  ) {
    return LiquidityProxyInstruction.HarvestRaydiumPosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([43, 27, 234, 87, 88, 152, 169, 189])
      ),
      0
    )
  ) {
    return LiquidityProxyInstruction.IncreaseRaydiumLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 127, 21, 1, 194, 190, 196, 70])
      ),
      0
    )
  ) {
    return LiquidityProxyInstruction.InitializeConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([20, 240, 112, 208, 102, 129, 214, 240])
      ),
      0
    )
  ) {
    return LiquidityProxyInstruction.OpenRaydiumPosition;
  }
  throw new Error(
    'The provided instruction could not be identified as a liquidityProxy instruction.'
  );
}

export type ParsedLiquidityProxyInstruction<
  TProgram extends string = 'GThwS7XKza6nKBgSMDstt1uVGrgEvfmLvkFq6C6tYdar',
> =
  | ({
      instructionType: LiquidityProxyInstruction.CloseRaydiumPosition;
    } & ParsedCloseRaydiumPositionInstruction<TProgram>)
  | ({
      instructionType: LiquidityProxyInstruction.DecreaseRaydiumLiquidity;
    } & ParsedDecreaseRaydiumLiquidityInstruction<TProgram>)
  | ({
      instructionType: LiquidityProxyInstruction.HarvestRaydiumPosition;
    } & ParsedHarvestRaydiumPositionInstruction<TProgram>)
  | ({
      instructionType: LiquidityProxyInstruction.IncreaseRaydiumLiquidity;
    } & ParsedIncreaseRaydiumLiquidityInstruction<TProgram>)
  | ({
      instructionType: LiquidityProxyInstruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: LiquidityProxyInstruction.OpenRaydiumPosition;
    } & ParsedOpenRaydiumPositionInstruction<TProgram>);
