/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getI128Decoder,
  getI128Encoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU32Decoder,
  getU32Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/web3.js';

export type TickState = {
  tick: number;
  /** Amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left) */
  liquidityNet: bigint;
  /** The total position liquidity that references this tick */
  liquidityGross: bigint;
  /**
   * Fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)
   * only has relative meaning, not absolute — the value depends on when the tick is initialized
   */
  feeGrowthOutside0X64: bigint;
  feeGrowthOutside1X64: bigint;
  rewardGrowthsOutsideX64: Array<bigint>;
  padding: Array<number>;
};

export type TickStateArgs = {
  tick: number;
  /** Amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left) */
  liquidityNet: number | bigint;
  /** The total position liquidity that references this tick */
  liquidityGross: number | bigint;
  /**
   * Fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)
   * only has relative meaning, not absolute — the value depends on when the tick is initialized
   */
  feeGrowthOutside0X64: number | bigint;
  feeGrowthOutside1X64: number | bigint;
  rewardGrowthsOutsideX64: Array<number | bigint>;
  padding: Array<number>;
};

export function getTickStateEncoder(): Encoder<TickStateArgs> {
  return getStructEncoder([
    ['tick', getI32Encoder()],
    ['liquidityNet', getI128Encoder()],
    ['liquidityGross', getU128Encoder()],
    ['feeGrowthOutside0X64', getU128Encoder()],
    ['feeGrowthOutside1X64', getU128Encoder()],
    ['rewardGrowthsOutsideX64', getArrayEncoder(getU128Encoder(), { size: 3 })],
    ['padding', getArrayEncoder(getU32Encoder(), { size: 13 })],
  ]);
}

export function getTickStateDecoder(): Decoder<TickState> {
  return getStructDecoder([
    ['tick', getI32Decoder()],
    ['liquidityNet', getI128Decoder()],
    ['liquidityGross', getU128Decoder()],
    ['feeGrowthOutside0X64', getU128Decoder()],
    ['feeGrowthOutside1X64', getU128Decoder()],
    ['rewardGrowthsOutsideX64', getArrayDecoder(getU128Decoder(), { size: 3 })],
    ['padding', getArrayDecoder(getU32Decoder(), { size: 13 })],
  ]);
}

export function getTickStateCodec(): Codec<TickStateArgs, TickState> {
  return combineCodec(getTickStateEncoder(), getTickStateDecoder());
}
